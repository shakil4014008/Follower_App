social networking code
- admin, user, notification,user checkin, admin cancel, notification


fundamental:
- software engineering mindset 


Advanced Topics
- notification


Architecture and automated testing
------------------------------
connect with tfs:
1. create visual studio online account and open azure dev
2. create project.
3. open visual studio and connect with team foundation server project
4. goto source control and map the project to local folder
5. add new project on that folder and when create new proejct check add source to source control

------------------------
Similarly if Git then
connect to git using git repository first before launching the project in the visual studio. Then check add to source control and then it should be fine with the git source control

---------------
note: both tfs and git has similar type of .git files directory. 

-------------
jetbrains.com//Resharper //30 day
productivity power tool
web essentials//tools->extension and update


----------------
core usecases first
//impact and design


Requirements document look:

//extract use cases
For: GitHub mini social nw easy live music -track gigs favourite
-signup, list gigs, add gigs , 
page, edit remove existging gig
upcoming gigs, search by artist, genre/location. view details of each gig and add it to the calendar

- user should follow their favourite artist, they shuould see upcoming gigs of their favourite artiss in the gig feeds.

----------------
http://localhost:56451

//windows update is a solution for many problems. 

----------------my usecase------
Extract use cases
usecase 1: track gigs by artist
u 2: signup
u 3: add, edit, delete, details of a gig and list gigs  for a artist
u 4: add gig into calendar
u 5: advanced search by artist,genre/location
u 6: user follow favourite artist
u 7: gigs feed of artist feed should come to user profile

--------------
calendar: appointment, schedule, address, contact list, call, email, 
--------------
u 1: authentication module: signup, login,logout,change password, edit profile, view profile(op)//its done by template

u 2: gig module: add a gig, my upcoming gigs(for artist), edit a gig, remove a gig, view all upcoming gigs, view all upcoming gigs, search, view gig details

u 3: gig calendar: add a gig to a calendar, remove a gig from a calendar, view gigs I'm attending

u 4: follow module: follow an arist, unfollow an artist, who I am following, gig feed



*** update stories in backlog

-------------
Find work dependency first which is required for architecting the document

if (view gigs - 1) then we can (follow artist - 2); (follow artist) then we can (unfollow artist -3)//dependency

so implement 1, then 2, then 3

****update dependencies


Orders of dependency by me for usecases (except authentication module)
#gig module
add gig, edit gig, delete gig, view gig details, view list of gigs

#gig calendar
add a gig to a calendar, remove a gig from a calendar, view gigs I'm attending

#follow module
follow artist, unfollow artist, gigs feed by artist


 



//tutor usecase with order of dependency
//here artist can add a gig; user can follow artists
//if user is mentioned in bracket, meaning who follow artist 

1 add a gig

2 my upcoming gigs, all upcoming gigs 

3 edit a gig, remove a gig, add a gig to a calendar, follow an artist (user), search(user), view gig details(user)

4 view gigs I am attending, who I am following, gig feeds 

5 remove a gig from calendar, unfollow an artist(user)


----------------------------------------------------------------
identify core usecases

add a gig --- ***** 1 (changes the state of the application)

remove a gig
follow an artist --- **** 2 
add a gig to calendar (to keep track the gigs they are attending)

remove a gig from calendar   ----*** 3
unfollow an artist

view gigs I am attending
who i'am following                         //these are supporting to demonstrate that our application works
we need supporting usecases like sql insert // ---- ****4 


to show them whether application is working or not we need to pick core usecases to implement
//sometimes need some supporting usecases 


--------------------------
Planning first iteration
summary of core usecases: add a gig, all upcoming gigs,add agig to calendar,follow an artist, view gigs I'm attending, who I'm following

- agile team iteration involves 2-3 weeks long

- do order of user stories
-------------------------------

Sketch User Experiences
- forms and redirection and button status changes
- navigation bar: menu and menuitems

Code first 

//if error then reinstall entity framework
//no context type found:: add a model class where DBContext exist and type only enable-migrations thats all
1. enable code migration 
 package manager console
  initializing powershell host
   enable-migrations
2. 
---
add-migrations
update-database

//aim for small migrations
//small changes small migrations



-----------------
how to resolve 2 project in tfs
- make separate root folder in local
- make separate root folder in tfs
- map them correctly
- when update, select each project separately and do checked in
-----------


//agile vs scrum
*in agile it is userstory
   in scrum it is product backlog item

*in agile it is iteration
    in scrum it is sprint 

The product owner creates a PBI or a tester creates a bug in the New state with the default reason, New backlog item
The product owner moves the item to Approved after it is sufficiently described and ready for the team to estimate the level of effort. Most of the time, items near the top of the Product Backlog are in the Approved state, while items toward the middle and bottom are in a New state
The team updates the status to Committed when they decide to commit to working on it during the sprint
The item is moved to the Done state when the team has completed all its associated tasks and the product owner agrees that it has been implemented according to the Acceptance Criteria.

------------
agile: new, active, close
scrum: new, commited, done

C:\Shakil\Projects\Team Project GigHub\GigHub\GigHub

How to map: 
- refresh the source, remove the existing map, then create new workspace map and update the directory, then click on the body of workspace and select root folder and click finish, then check pending changes and commit changes. 
---------------


//Correct mapping
- in vs 2015: get the source control link in team viewer and keep the current project with source control selected
- add a project and click add source control

*** a popup will comes and display mapping, make sure this window you fix the mapping you need. 


----------------------------
add-migration; update-database

aim:small migration

domain classes

in class design: remmeber: 
  use where, when, how information

tools=>productiveity power tool
  setup //remove unused refer during save

//format document on save 

///dont create giantic model
   ; but small then complete following

//update keyboard shortcut
//show pakcagemanagerconsole
Alt(/ then .)=> Alt+/, Alt+.


-- add-migration CreateGigTable

//go back: ctrl+tab 

//resharper : rename file name
   alt+enter

//close all window
  alt+w, L

//force same name add migration

add-migration CreateGigTable -force

jobeda: jsh@kil4

//convention over config

//override codefirst convention
data annotation || Fluent API



ctrl+tab => like tab of vs 


resharper->options->env->resharper keyboard

//ctrl+sh+N//file search with resharper

//code first create table with default settings that need to be override using data annotation

 
//design decision(based on cost and benefit)-- u the software enigeer
sol:
admin(overkill, more overhead) or script? script(ok) 

//script 

up method:database could be upgraded and 
down method:database could be downgraded; opposite of up method

//DUPLICATE WITH RESHARPER
CTROL+D

//do: udpate-database to see the data

//click on the folder where file changes and then right click will appear the undo pending changes


//if design you are not follow your guts then you will die 
as a software engineers

by calculating the list of consequences.

-------------
learning curve: for full stack developer
1. react
2. angularjs

why need shelvesets
- interruption
- collaboration 
- code review


---------------------
module review: 
- build a simple domain model
- aim for small code-first migrations
- commit to the repo often
- use shortcuts
- its your job to make design decisions not others//think all decisions cost and benefits

------------
forms and bootstrap, viewmodel

ui:
goto view and add view, name should be same as defined in the controller

ctrl+F5 //run



//https://getbootstrap.com/docs/3.4/css/#forms



copy//control+D


//presentation model, viewmodel

//resharper shortcut
alt+ent

readonly : because it only initialize in the constructor and it will not be used anywhere else

//after add/edit done, do review
check anything to improve or update, then commit

bootstrap
- use responsive model 

View Model Pattern//
- Provides clean separation between uI and domain

saving data:
//separation of concern 

only allow authenticated users

//authorization
[Authorize]

//resharper selection tool in view
ctrol+(continue selection W) //extend
ctrol+(continue sh+w)//shrink

//resharper selection c#
alt+(hold down arrow, up arrow)
//to move cursor up and down

//if user.identity.getuserid
does not recognize then

//do not form the form again

save
build
back to the error view: press ctrl+r//press continue

//if we call _context two time for 2 variables then it will travel 2 times to the database; how to resolve this rroundtrip??
sol: create userid 

//resharper goto definition
ctrl+B

//do update Gig class to not sending data for two variables

//then save
add-migration AddForeignKeyPropertiesToGig

domain model modified, database is modified, and remove unnecessary plan


//ctrl+shf+


//domani model and viewmodel should be same type


cntr+sh+R// activate refactoring

//


//poor separation of concern
controller: what should happen
  its like a manager
  people do the actually works


//sheff: does cooking

review
- User.Identity.GetUserId()//string
- Foreing key properties//little better
//require for lessenign coding
- Information Expert Principle//concern of separation
// move responsiblity from controller to viewmodel
which is separation of concern
//cooker should cook; waiter should serve 

identity.getuserid is guid string

where the information stored, thats where the information should be respnsible; like 


when assign responsiblity: first determine where the information comes from; then where it will be store, there we should store the responsibitlity. 
------------
validation

server side validation

create if model is valid
if not return to same view
otherwise home page

run: ctrl+f5


//datetime issue: asp.net mvc uses reflection to see the gigformviewmodel and hence caught exception; so, 


Rename: F2

ctrl+w
ctrl+x

ctrl+v//paste


Build sequence
build: control+sh+b; thne go to browser ctrl+r//to repost


//make sure what user puts are the valid date


//convert.ToString vs .ToString
the second one should be used when we make sure that the value is not null

//select the selected method
ctrol+w
//copy paste
ctrl+D

//move to a new file 
ctrl+alt+ent and 
select the point to move to a new file

//how to enable client side validation
//bundleconfig
//jquery.validate
//jqurey.


in layout view: 
you can see all the layout loaded script

in create view, you need to keep script render inside a script using @render for client side validation. 


//if you now check network tab and hit save button you will not see any client server data transfer because of client side validation
//this is all data annotation

dataannotatoin: both server and client side validation
- required, range, minlength, maxlength, phone, emailaddress, regularexpress,

#remmeber to add jqeuryval at each page you need client side validation. 

section: preventing common web application vulnerablities

sql injecting
cross site request forgery
cross site scritping


sql injection: 
- malicious sql execution


var sql="select * from users where userid="+userid;

"1234 or 1=1"//meaning either userid 1234 or any user

prevent: parameterized query

we are doing: 
_context.Gigs.Add(gig);

sql vulnerable would be if: 
_context.Gigs.SqlQuery("select * from.."+input)


------------------
XSS cross site scripting
malicious script
//users cookies hijacked,
web cam, filesystem...geo

prevent XSS: 
use escaping content
raw data: <script>)-> Escaped data: &alt;script&gt; 

-asp.net mvc rejects javascript in input
- Razor views escape content

only vulneralbe if using 
   Html.Raw()

--------------
CSRF - 
Transfer money from source to diverted illegitimate account

here in post method, in the same browser, when click any website icon or button, it can get the session data and session and update the scripted form and update the account information, 

//it is hard to detect the intrusion because everythign looks legitimate operation even entering account valid information.

//allows an attacker to perform actions on behalf of a user without their knowledge

//any content

Prevent: 
1. in view
using(html.BeginForm()){
@Html.AntiForgeryToken()
}

2. in controller

[ValidateAntiForgeryToken]
public ActionResult Create()


simulate antiforgery token
check element tab inside beginform and application tab inside cookies requestverificationtoken
 you will see the token value


asp.net will compare these two values from elements and application cookies; if they match that is a legitimate  request otherwise csrf attack.

 because user could have access to cookies but not hidden field. 

to simulate: remove elements token value during posting from the browser inspect element. You will see the error .

--------------
beautiful design:
colors, meaning, 

meanign of color:
subjective
warm(red, orange, yellow), cool, nutral


red: fire, power, energy, passion, and love
orange: vibrant, energentic, fund, exciting
yellow: happiness, sunshine


green:calming, healing, natural ,protection
blue:trust, loyalty, friendliness, 

pink: romantic, feminine, love, beauty

black: powerful,sophisication, formality; sometimes...
white: clean, perfect, pure
grey:conservative and formal



gighub: red and orange
-fund, passion

-----------
choosing a font: 

google.com/fonts(free)
fonts.com
fontsquirrel.com
typekit.com


---------------------
fonts link and css select 

---------------
#put two webpage side by side
#beside styles there are Computed tab 


this font will increase size of http response

where is our stylesheet that font is set?


the element text or button you want to change, select the cursor there and click inspect


do not change bootstrap.css but override site.css
--------
modern and chunky

check all control font and update their css in site.css

when find the css class name update that in site.css and also see the html elements

//to override focus or hover we need to click hover beside filter then you will see force element state. then select focus; u will see the element. uncheck border-shadow, outline 



border color and outline remove shadow:

#2196f3

//dropdown menuitem in menu
//getboostrap
//go under components:
https://getbootstrap.com/docs/3.4/components/

//u will see the icon boostrap

web build: 
u build and then refresh using same link; then it will rebuild and refresh the ui

summary:
design - 
  -iterative
#  color meaning
#  fonts
  big: youthful
  small: serious

Override bootstrap styles
-------------------------

Usability Best Practices
  - principle

Label: no long text, alignment, 
   stick to righ aling or top align; good(follow eye movement)
no ambiguous words
be concise

Fields: 
   reduce the # of fields
   avoid optional fields//capture only really require
    separate mandatory and optional fields
   Group related fields
   specify the format
   set focus on the first field

//shortcut in view resharper
ctrl+alt+j//select tag or link or more//surrond with menu

//set autofocus attribute


Actioins:
  - Each form should have a primary action
 -  avoid secondary actions if possible
- otherwise visualiy separate them
- align primary actions with input fields


- elements in top left get most attention, bottom right least attension

------------
validation message

-provide clear validation msg
- red: error, green: success
- goal: reduce user stress
- Provide smart defaults


//make color red: using same css override

summary:
 - common sense usability
- usablity principle
-
Actions: 
 - separate primary actions
 
Input fields:
  - avoid optional fields
  - if not, separate them

Validation Message
- keep them clear
- use red 
----------------
Extending asp.net identity users : building basic view

ctor then tab//implement constructor

//eager loading with include


resharper shortcut; view methods
//ctrl+F12




How to build and browse
build: ctrl+sh+b
browse:ctrl+F5

---------
extend applicationuser class
-add additional properties
-create migration
-update database
-modify sign up form


---------------
front end -- css
//zencoding 
comes from essentail

//div.date then press tab.

// (div.date>div.month+div.day)+(div.details>span.artist+span.genre)

and tab

here () meaning group 
> are the children

----
relative and absolute position

CSS positioning: An element with relative position allows us to absolutely position its children

relative: parent
absolute: children


.gigs>li{
}//here > symbol means, li is located immediate below gigs

---
note: build: 
when we run chrome in ctrl+F5; then any save in html auto refresh in the background

.gigs > li .details {
    position: absolute;
    top: 0;
    left:70px;

}
//space between li and .details

//two window side by side
windows+right key


to get line break
set display: block
//as span here it defaults to inline 

//to make the top down
body{
padding-top: 50px;
}

Summary: 
- be master front end and back end
- Relative and absolute positiing
- Zencoding for html markup
- css attributes for calendar
--------------------
Add a Gig to Calendar
//
problem: keeping track of the gigs the user might be attending.

//moral: do not model the universe when creating model

Relational Model (M-M)
//user(*)-----(<attendance>)-----(*)gigs

//attendance intermediary table

a gig can have many user
a user can attend many gigs

//column order is the order to break the default ordering 
and set the right customized order

add db set

//technique for long name class
instead of typing applicationdbcontext write adbc



//We need fluentAPI
//to prevent cascading deleting issue
//

//using fluent api
//here no comment used
just inside comment


//to override migration
add-migration AddAttendance -force

-------------
building UI- use ajax

use lightweight restful api

api contract
/api/attendances 
http post
gigid is better 
userid not

userid only authenticated user

//msg from webapi creating time vs2015

-----------
Visual Studio has added the full set of dependencies for ASP.NET Web API 2 to project 'GigHub'. 

The Global.asax.cs file in the project may require additional changes to enable ASP.NET Web API.

1. Add the following namespace references:

    using System.Web.Http;
    using System.Web.Routing;

2. If the code does not already define an Application_Start method, add the following method:

    protected void Application_Start()
    {
    }

3. Add the following lines to the beginning of the Application_Start method:

    GlobalConfiguration.Configure(WebApiConfig.Regis
--------
[FromBody]: by default int; it expect URL, thats why FromBody attribute


last: Testing the api with postman

http://localhost:59689/Home/Index

webapi: http based services
      for building rest services
  iots 
 security systems, smart phones, cars

webapi works both rest+wcf


//Error resolve
- to resolve error authentication error: set user, pass and also enable postman interceptor app in the chrome extension enable app with your credential

//Error: resolve
- to resolve the request entity media type text/plain not supported..

sol: update header content-type .

to write javascript
@section scripts
{
}
 
- jquery source of the event
* pass the event parameter e
* then $(e.target) is the source attribute

--------
select gitid to localchange
then write the new object properies and vs prompt to change all, select done.

--how to see error?
select on the browser any position, then inspect, then click the red x icon on the inspect bar top right. u will see the error. 


---
steps:
- build simple model 
- migrate the database
- build an api
- implmenet the view

Focus only one aspect at a time

-------------
******** Todo: Exercise: implement follow an artist

In the webapi, 
  set header and authorization, and if need to pass data, set that inthe body, and set the content type. 

see the output whether it points to any thing, it will indicate something 


---------------
Current software problem: 
-  does not display update view in homepage
- duplicate value insert not showing alert/and does not reflected the update in the view


Tips build: if you want to debug c# code with javascript in chrome
then run the by clicking Google Chrome browser then set debug point both c# and chrome dev debug window. 

-----------------
- if a property is a collection of a class, then that property needs to be initialized in the parent class constructor

- application user can have many follower and many followee. Now, follower and followee both are applicationuser. 


//EF FluentAPI does foreign key relationship

for M-M relationship mapping


- If in your DB, you have a foreign key to another table and that foreign key is NOT NULL, then use WithRequired, else if it can be NULL, then use WithOptional

- https://docs.microsoft.com/en-us/ef/ef6/modeling/code-first/fluent/relationships


--only show to authenticated user


return back to previous location in visual stuido
ctrol+ -

IQueryable have the ability to extend the query
IEnumerable have the ability to iterate the list

alt+enter enter
ctrl+sh+r =>move to folder

-------------
implement: view gigs I am attending

linq can not translate to sql so; user.identity.getuserid needs to store in separate variable and then put the variable in the linq.

apply dry principle
don't repeat yourself

- when 1 view has share by 2 actions then keep them in shared folder
* Gigs view should be in shared folder as it is shared by gigs and home controller both.

---------
more reusable css


in site.css creates new css which are more reusable and not overriding 

--------------------
Second part

----------------
in gighub we used client side ajax functionality to call webapi

sometimes reusable not the right option

do not want to make it jack of all trade 

---------
ctrl+w 
  select and click w again to select whole block and 
ctrl+sh+w 
    to unselect the previous step

eager load: //kind of join another query
   
- in eager loading also load related entitiies using Include<> statement, so that we don't need to add separate query for related entities. 

search in the current page: 

--
to open git in visual studio, go to team exploer, right click on the solution, open command prompt


if says, permission denied in visual studio and you already in gave permission, 
then restart visual studio, then, vs should track changes. 




Refactor: Implementing the update
expression:

hoever over: then edit/delete appears.
using css 

zencodes
div.actions then tab

a[href="#"] then put the cursor at the end; then tab

a hover on the div to hide

div {
    display: none;
}
    
a:hover + div {
    display: block;
}

edit

-- always use user id when edit and fetch data for security holde remove

pass anonymous object id
 new {id = gig.Id}

make sure you build if c# code in the back end.


//to display jazz in dropdown
- remove padding in site.css
- add height: 44px;

   
//button size changed and then causes issue for anohter and removed the style, so need another way to fix it. 

add bootstrap class: 
  btn-lg //large 

refactoring; 

adding heading: user property using resharper and then update the class and fill the data from the controller

 ViewBag.Title  is the page title
 
 
check all the view call

if we want to refactor action name dynamic, then select the string, create reference property then update those. 


create hidden form to remember to remember the action

keep near the header is better 



sometimes visual studio can not behave the same way..believe it. for different machine


in edit: we need to update based on ID property..so...


need 1 more refactoring



remove magic string and use dynamic variable; because that can break entire application.

-- use anonymous method

how to use anonymous method in c#
Func<input, return> update = (c => c.Update(this))

here update becomes a delegate which will represent update method

now, if we want to create expression, we can use this Func delegate data 

Expression<Func<ControllerName, ActionResult type>> update = (c =>c.update(this));


no name in anonymous method

employee class, object, list

list.find(predicate ..its a deligate which is 
delegate-- function pointer
create function
signature
signature should match delegate
delegeate is called typesafe pointer

question: find a employee info from a collection where empID = 102.
i.e. employee = collection.find(102);


//step 1
public static bool FindEmployee(Employee emp){
return emp.ID == 102;
}

//step 2
Predicate<Employee> empPredicate = new 
Predicate<Employee>(FindEmployee);

//step 3

instead of step 1,2,3 write directly the delegete and pass the input to get the employee object

Employee emp = listEmployee.Find(delegate(Employee emppl){
return emppl.ID == 102;
});


back to the point:
  we need expression 1 to determine update
  we need expression 2 to determine create
  
we will create expression which in turn uses anonymous method

 -----------------

  

extra reading:

Question: how netflix or any other keeps tracking whether this user already used this service or not?

1: email, credit card and device

bitcoin----
 blockchain 
  use ledger
  
bitcoin mining
asci machine
cryptomining
bye bitcoin 
wildly up, wildy down
ledger 
coinbase
etherium
 



summary: 
- focus on core use cases first. 
- create good foundation
- remove magic strings
    very fragile 
 and use lambda expression for dynamic change detection'
 
 
 
 -----------------
 - logical delete; 
    * undo things
	* prevent cascade
 - bootstrap confirm dialog
 
 
 to bind data in the link that will be used in ajax call, use the data-* bind attribute
 
 section script written in such a way to make sure javascript and css code loaded before hand. 
 
 
 var link = $(e.target); gives the link element
 
 then we need to get the attribute value from it. 
 
 $.ajax uses promise 
 
 .done: if delete operation successful inside the web service call with the parameter, then some additional works need to do after deleint in the database, like css and ui stuff, thats need to be completed. 
 
 parent and child tag in css
 
create: 
 parent child relation tutorial in css
body> center > p {
 }
 
 <body>
 <center>
   <p></p>
 </center>
 </body>
 
p.edible

here p is paragraph, then edible is class


//session data in asp.net
 cross page postback
 conext.handler object
 querystring
 cookies
 session state
 
 text1, text2, button
 
 sesssion["Name"] = "";
 
 here Name is key.
 
 Responese.Redirect("~/Webform.aspx");
 
 here ~ root directory
 
 //retrieve the value in the webform.aspx: 
 string val = session["Name"]
 
 //it can any type of data. it is an object.
 
 
session variable stored in lifetime and that controlled by timeout.

sessionstate mode ="InProc"

default is InProc

they store web server memory

if we do not set timeout then default is 2o min


cookies in asp.net

send data from one to anohter page
client info stored.
small amount of info in client machine

create: 
//to store the name and email in cookie variable.
HttpCookie cookie = new HttpCookie("UserInfo");
cookie["Name"] = txtName.txt;
cookie["Email] = txtEmail.txt;

//to write in user machine
use response object

Response.Cookies.Add(cookie);
Reposne.redirect("Webform2");


//now in webform2 we need to read the value
it is similar to session
if(cookie!=null){

HttpCookie cookie = Request.Cookies["UserInfo"];

lblName.txt = cookie["Name"];
}
//if check cookie is null or not


Note: in $.ajax method operation happen in the body; but after operation or post activities happen in success or done state.


send data from webform1 to webform2

txtname, txtemail, button


Responese.Redirect("~/WebForm2.aspx?UserName"+txtName.text+"&UserEmail="+txtEmail.Text);

querystring is name value pair;
there is a limit of # of querystring
- ? to start, need a name, and need to send the data, & to append

In the webform 2: 
   lblName.text = Request.QueryString["UserName"];

space is now encoded to %20

//we can send using 
Server.UrlEncode(txtName.Text) 
//it automatically decoded

& is represented by %20

dJango use for python web

send and receive json object in mvc


this object means immediate parent object not grand parent object. 


 Todo: 
 - when click cancel my upcoming gigs; it does not fade out 
 
---------------------------------
modal: bootbox.js

timelapse software-lense math
computer graphics-adobe action
cross platform
 
Custom dialog using confirm

-------------good one-------
@model IEnumerable<GigHub.Models.Gig>
@{
    ViewBag.Title = "Mine";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>My Upcoming Gigs</h2>
<ul class="gigs voffset4">
    @foreach (var gig in Model)
    {
        <li>
            <div class="date">
                <div class="month">
                    @gig.DateTime.ToString("MMM")
                </div>
                <div class="day">
                    @gig.DateTime.ToString("d ")
                </div>
            </div>
            <div class="details">
                <span class="artist">
                    @gig.Venue
                </span>
                <span class="genre">
                    @gig.Genre.Name
                </span>
                <div class="actions">
                    <a href="@Url.Action("Edit", "Gigs", new { id = gig.Id })">
                        Edit
                    </a> |
                    <a href="#" class="js-cancel-gig" data-gig-id="@gig.Id">
                        Cancel
                    </a>
                </div>
            </div>
        </li>
    }
</ul>
@section scripts
{
    <script>
        $(document).ready(function () {
            $(".js-cancel-gig").click(function (e) {
                var link = $(e.target);

                bootbox.dialog({
                    message: "Are you sure you want to cancel this gig?",
                    title: "Confirm",
                    buttons: {
                        no: {
                            label: "No",
                            className: "btn-default",
                            callback: function () {
                                dialog.modal('hide');
                            }
                        },
                        yes: {
                            label: "Yes",
                            className: "btn-danger",
                            callback: function () {
                                $.ajax({
                                    url: "/api/gigs/" + link.attr("data-gig-id"),
                                    method: "DELETE"
                                })
                                .done(function () {
                                    link.parents("li").fadeOut(function () {
                                        $(this).remove();
                                    });
                                })
                                .fail(function () {
                                    alert("Something failed!");
                                });
                            }
                        }
                    }
                });
            });
        });
    </script>
}


--------------
bad one--
@section scripts
{

    <script>

        $(document).ready(function() {
            $(".js-cancel-gig").click(function(e) {

                var link = $(e.target);
                

                var dialog = bootbox.dialog({
                    title: 'Confirm',
                    message: "<p>Are you sure you want to delete this gig?</p>",
                    buttons: {
                        No: {
                            label: "No",
                            className: 'btn-default',
                            callback: function () {
                                dialog.modal('hide');
                            }
                        },
                        Ok: {
                            label: "Ok",
                            className: 'btn-danger',
                            callback: function () {
                                $.ajax({
                                        url: "/api/gigs/" + link.attr("data-gig-id"),
                                        method: "DELETE"
                                    })
                                    .done(function () {
                                        link.parent("li").fadeOut(function () {
                                            $(this).remove();
                                        });
                                    })
                                    .fail(function () {
                                        alert("Something failed");
                                    });
                            }
                        }
                    }
                });
                 

            });

         

        });
    </script>

}


---------------
---------------


Fix: why fadeout was not working?
use parents instead of parent 
because here multiple child not single child 

------------------
how to compare two note.txt file in notepad++
1. load file1, file2 in notepad++ in two tab
2. click compare

---------------
highlight the gigs who cancel their show
in the Gigs I am attending

Handling edge cases:


if second time calls to cancel it should return an error message; 

How to move all the files to a folder ?
- Organization: use resharper
 and point to the folder
1. ctrl+sh+r to open reshaper on the root line of class to move
2. move to folder and show the folder name

//drag and drop does not work

Here we implementing 
logical delete, 
   historically useful for report on historical data
Bootbox for native javascript alert
   
Notification system implementation: 
- notify gigs cancel or updated. 

start: always start with domain model

Requiremetns:
user should be notified 
 gig is canclend gig is udpated, gig is listed
 
Notifications
 1. James has cancelled the gig at Paris on 21 nov at 6pm(Cancel) 
 2. Bill has changed the date of the gig at Partis form 21 6pm to 22 nov 8pm(Update)
 3. John is performing at Rod Laver  on 23 Nov/6PM(Listing)
 
 
 ---------------
 Domain Model
 - as software engineer, 
    reduce effprt of changes
 - inheritance should not be reuse
-----------------------

should we fullfill all the scenario for future?

*** Solve today's problem in an outstanding way not future problem



For interview: use notification design 
 
NOtification - ---  NotificationType 
Notification * -----1 Gig
Notification*----*UserNotification--Use

----------------------

 NotificationType enum
 notification class
 usernotificaiton class
 
 
------------------------
pluralsight------------
domain model analysis is the real modeling


now lets code: 

notification-notification type
notification*-1gig
notification*-usernotification-*user


create class then change it to enum
the enum  value will be store in database


if we want to make 
notification*-1gig relationship:
we have to create a Gig object as a property in notification class which will be required. 

---
from the model we see, notification and user will be connected through usernotification class; now to connect these two classes, usernofiication class needs key and colum attribute with their primary id to make composite key. also to keep navigation property we nee d applicationuser and notificagtion class 
command: update-database

Fixes: foreign key problem fix
- cause cycle in multiple cascade
solution: use fluentapi to stop cascade delete onChange method


userNofitication
.HasRequired(n=>n.User)
.WithMany()
.WillCascadeOnDelete()

after doing this chages, we need to run the add-migration again

then update-database

ef 6 mvc 5
--------
when user cancel then create a notification

- get the notification
-get all the users to notify



---
musican can signup and list their upcoming gis(shakil4014008)
follower can see the gigs and some information and all the notification of the gigs changes

-- uml diagram is temporary commmunication tool to understand and analysis problem

no class diagram needed...
ultimate doc is source code 
and make it clean
use composition not inheritance


more object oriented design


refactorig

anaemic domain model

behaoir rich domain 

as the logic grows in controller , it becomes fat; rather making it fat, we can use soc separation of concern and more behavioru rich model

We need a domain model that protects its state; no null reference exception

to create auto property in the constructor ; click on the property and select the insert auto property

to handle null reference exception in the entity framework:
 craete a constructor
 
 
 because: when we create custom constructor, we should always use default constructor
 
 
UserNotification constructor is for EF
{
}

conceptually different relationshipt??
variable shoudl not be avaialble after initialaization

//
handle null in the notification object too.

if we do not want to change id; then we can set private in the code. 


this way we can handle null reference objects. 

-- removes round trip to database 
  and use eager loading to fix this. 


Any collection needs to initialize in the constructor

object being in valid state: make the set private to avoid accidental override the whole collection with another collection

from the collection we can not type attendee; so use select method. 

-------refactoring--for cohesion

highly related things should be together
in method level.

like we did notify: we will encapsulate cancel method for into highly cohesive module.

shortcut resharper: 
  when need to add new property to current object: 
  Alt+Enter and enter
  
 //shortuct: how to fix local variable references using resharper
sol: select one object then press alt+enter then, scroll to the rearrange local variables and then alt+enter and if need add import

---
now calling data from repository is standard; its not controller responsibility
- we need some architectureal pattern. 

In google they always wants to remove false positive: 

- EF thinks it changes model, but it didn't then how to fix?

if these happen, meaning something is wrong in the configuration in the classess
 
 if we look onModelCreating and see the modelbuilder in fluent api, then we will see the problem. 
 
 Every user can see upcoming gigs
 
 A user can create his gig or show in his profile and other user can see those gigs
 
 Now when that user who creates the gig, cancle all user should get notified. 
 
 In edit action: we only shows the edit view; to update thi edited part, we use 
 
Factory method can help to creating methods where variables are valid states. 

making method private

create factory method ; this will help for initialization stuff which will help to not break the null reference exception
and helps to create cancel, create, update notification. 

private set : meaning set can not be changed. like notification. they are readonly. 


State: Fixed invalid state issues. 

Cohesion: higly related object should be together
-------------------------------------

UI
map domain object with dto(data transfer object) using api

Building an API
need an endpoint
GEt /api/notification

call using jquery
get the data and render on client

find endpoint: 
localhost:33/ControllerName/ActionName

 
when calling api: 
   at first login with the same name use enter in the website; that should be in basic authentication in the postman too.
   then put the url 
    now url should start with api/controller name
	
	
Rule: ** we should not expose our domain object from api
we should return dto not model.


-- alt+ent shortcut of resharper...nice...



-- AutoMapper 
is a convention based mapping tool.

PM> install-package AutoMapper

dto class to professional name to avoid redundancy

n => new NotificationDto()
            {
                DateTime = n.DateTime,
                Gig = new GigDto
                {
                    Artist = new UserDto
                    {
                        Id = n.Gig.Artist.Id,
                        Name = n.Gig.Artist.Name
                    },
                    DateTime = n.Gig.DateTime,
                    Id = n.Gig.Id,
                    IsCancelled = n.Gig.IsCancelled,
                    Venue = n.Gig.Venue
                },
                OriginalDateTime = n.OriginalDateTime,
                OriginalVenue = n.OriginalVenue,
                Type = n.Type

            }
			
			
--instead of this use mapper class
it remove codes

need single place to all mapping to reuse



fix: if version does not match and can not install package becuase existing framework or something

solution: try to install another version. 

--configure webapi to return data in camelcase notation: 

use configuration file to update that. 

cursor moves to line head and tail
shortcut: Fn+home //head
          Fn+End //tail
			


shortcut:
Move selected files in a particular folder
1. select files
2. ctrl+sh+R
3. Move to target folder 
4. enter



only new notification to show
!IsRead

summary:
Contract of apis 
- should be dtos
- u can refine and expose only important and non sensitive data

Mapping domain objects to dtos
- automapper 

-----------
UI------------------

in menu in loginpartial view : do zencoding
  li>a[href="#"]>i.glyphicon

  
  zencoding
  span.badge then click tab when the cursor is at the end.//icon to notify
  
  to change the position of badge from the globe, we can use absolute, relative css concept.
  
 -  make parent class position relative
 - 
  
  
how to fix css: in Mine.cshtml view?
because _loginPartialView also do not see the 


-- disable and enable cache from chrome network tab in developer tools.

css: how to go beyond the right
use -ve number
if 0; no need to put px

here notification returned from the server api: 

   $.getJSON("/api/notifications", function (notifications){
   
-----------------
something cool...
   

animate.css

https://daneden.github.io/animate.css/
download css file 

add the css file into the bundleconfig.cs file

-- implement popup using bootstrap

In bootstrap website: goto getboostrap.com/javascript page
see popover

//at first do hardcode to check
//then use dynamic data to render

absolute: meaning subtraction
relative: different of ratio

-- here in popover we can create html attribute and render in the content in popover javascript: However that is poor way. We can make a template and place the view on this content.

ask to templating: we can razor. 

---------underscorejs.org 

//object, function...template..



if scripts or bootstrap css library file is not under any bundle category we can take different approach
however, we can attach the name in jquery or csss based on the type of the library file. 

plumbing code: Plumbing code is a code that provides regulations for the design, installation and inspection of building plumbing and sanitary systems. In the U.S., jurisdictions enact their own codes, some of which are based upon model plumbing code

plumbing code of template is working


<%= name%> //this is used to evaluate variable

<% %> //if no = sign then we can use logic


in layout notificaiton: callback funcions fills the notifications data


when we call the api, notifiatiosn data fills. 
  $.getJSON("/api/notifications", function (notifications) {
  
  
  select the boundary method shortcut
  ctrl+w
  
  userid: "646a3842-03a3-4268-9257-83c8bcfb56f2"


--if notification.type == 1 then do all the logic..




 
 

Everything you need to know about underscore template is here. Only 3 things to keep in mind:

<%  %> - to execute some code
<%= %> - to print some value in template
<%- %> - to print some values HTML escaped
That's all about it.

Simple example:

var tpl = _.template("<h1>Some text: <%= foo %></h1>");
then tpl({foo: "blahblah"}) would be rendered to the string <h1>Some text: blahblah</h1>



  <script type="text/javascript">
                (function(){
                    var people = ["Tom","dick", "harry"];

                    _.each(people,
                        function(name, key) {
                            console.log(name);

                        });

                });
            </script>
			
--------------------------------
template is not loading..


if no data; simply return without any data. 

-- section script runs at server side.

			

MSC1990155378


handle edge cases:

summary: 
-icon, badges, and popovers

- render view
   consume the api, and render the view in the client using template
   
   helps to reduce the load
   
- 
-----------------------------
Moment.js library

how to remove last border in css

fix: how to fix underscore.js not loading problem; 

- undo all changes and recreate again


template: default html there to make default html. 



In design choice: we have to think
what we want to make it bold or different color so, using inline style is not good choice; 
like <strong></strong>
instead use span that apply class

don't change markup but stylesheet

update datetime and parese and reformatting it. 
using moment.js 

list of code smell:
- modify multiple places
- repeat of codees

how to use moment function

lotfs of functions and manipulate datetime in moment. 


- remove shadow

consolidate bundles
- 


make two to 1 single library bundle
change in bundle.css and update in where they are called e.g. layout.cshtml

tow bundles
1. lib: 3rd party
2. app: 


modernizr should be at the head section of the html



LESS bettr way to write css
- DRY dont repeat
- we can do nested code
- u can define variable
- spend half an hour



CSS 2 Less converter. 

web essential will do for less.



jqeury: on is for event. 

behavior not real object

doing easily unit testing.

behavior rich domain model
---------------------
post like new request...new resource 
thats why httppost.


object is about behavior not bag of data

u can create unit testing without mock or in memory etc.

---use as many tech u learn

Bootstrap events 

summary:
- here hide comes when click the notification and it removes all the notification.


------------------
search

search input group

getbootstrap.com / components / #input-groups

steps of searching functionality: 
step 0: use home index functionality
step1: for giving input value, use input for querystring
step 2: for bookmark to display last search - in viewmodel set the searchterm = query; where in the search textbox we already set m=>m.searchterm

always check edge cases

--------------------
1. watermark
2. remove shadow
3. remove transition

 ------------------------
 Architecture and testing
 - decoupling 
 - unit and integration testing
 
  assertion and mocking
 
-------------------------------
what we done
1.
add a gig

2. 
my upcoming gigs
all upcoming gigs

3.
edit a gig
remove a gig
add a gig to calendar
follow an artist
search


4.
view gigs im attending
who im following

Remaining:
3
view gig details
4
gig feed
5
remove a gig from calendar
unfollow an artist

------------------------
give u momnetum

link and show details
/Gigs/Details/7

- show bold artist name
- "Performing" + venue + datetime
- for login user
  following button
  I am going to this gig

  
  shortcut to make 2 split screen
 Windows+ right arrow //
  
  Fn+End
  Fn+Home
  
  selection
  Fn+sh+End
  Fn+sh+Home
  
  <a href="@Url.Action("Mine", "Gigs")">My Upcoming Gigs</a>
  
@Html.ActionLink(@gig.Genre.Name, "Create", "Gigs")

how to send data in /details/id?

in search we pass querystring in the index method. 


question: when to use model and when to use Model?


question: what is _Viewstart.cshtml
it is like master page, it executes before all the view execute

ViewData--used liek a session viewData[""]=x//here x could be collection
ViewBag-- ViewBag.Title
PartialView -- normal list passed into view, then in html page, iterate and first line:
@*Iterating Course Model*@


TempData-- like viewdata
ViewModel
Tuple


--------
when we refresh the data is gone..

that need to fix

the state management saysing about viewData

q: retrieve form values from httppost, dictionary or ..

solution: you can use FormCollection like:

[HttpPost] 
public ActionResult SubmitAction(FormCollection collection)
{
     // Get Post Params Here
 string var1 = collection["var1"];
}
You can also use a class, that is mapped with Form values, and asp.net mvc engine automagically fills it:

//Defined in another file
class MyForm
{
  public string var1 { get; set; }
}

[HttpPost]
public ActionResult SubmitAction(MyForm form)
{      
  string var1 = form1.Var1;
}


another way: 
[HttpPost]
public ActionResult SubmitAction()
{
    var value1 = Request["SimpleProp1"];
    var value2 = Request["SimpleProp2"];
    var value3 = Request["ComplexProp1.SimpleProp1"];
    ...

    ... return something ...
}


and another way:

You can also post back a model without using any razor helpers. I have come across that this is needed some times.

public Class MyModel
{
  public int HouseNumber { get; set; }
  public string StreetAddress { get; set; }
}
The HTML markup will simply be ...

<input type="text" name="MyHome.HouseNumber" id="whateverid" >
and your controller(Razor Engine) will intercept the Form Variable "MyHome" and try to build it up and cast it to MyModel.

[HttpPost]
public ActionResult PostBack(MyModel MyHome){
    postBack.HouseNumber; //The value user entered
    postBack.StreetAddress; //the default value of NULL.
}

another way:
If you want to get the form data directly from Http request, without any model bindings or FormCollection you can use this:

[HttpPost] 
public ActionResult SubmitAction() {

    // This will return an string array of all keys in the
	form.
    // NOTE: you specify the keys in form by the name attributes e.g:
    // <input name="this is the key" value="some value" type="test" />
    var keys = Request.Form.AllKeys;

    // This will return the value for the keys.
    var value1 = Request.Form.Get(keys[0]);
    var value2 = Request.Form.Get(keys[1]);
}



link: https://stackoverflow.com/questions/5088450/how-to-retrieve-form-values-from-httppost-dictionary-or

how to write inline c# code inside button for class name change dynamically

<button
	data-gig-id="@gig.Id"
	class="btn @(Model.Attendances.Contains(gig.Id) ? "btn-info" : "btn-default")  
		btn-sm pull-right js-toggle-attendance">
	Going?
</button>


Find references using resharper shortcut

ALT+ F7; do it by keeping the cursor on the text. 

Key: find all references and see any references that could cause null references

In this case, we are watching GigViewModel and fixing any null reference expception possibility by adding attendances property.

Revere part: 


key: before refactoring make sure it working.


exercise: if gig exist, then delete api endpoint otherwise notfound error

-------------------------
we can use class for implementing logic during ajax call.

we can load c# code inside the button too.

----------------
we can bind the data in button using a model 

data-bind-id = @gig.id


--------------------

create api endpoint to send delete 
delete attendance 
for the given gig
for the currently logged in user


remember: during delete operation in webapi:
- if fail, return notfound
  if passs, return ok
  
- handle exception
- handle references

 
.SingleOrDefault return the delete object

BadRequest("")//class
NotFound() //class

during delete use only single object

finally put the id with the Ok(id) which is the restful condition


refactoring the javascript code
----------------------------
Modularized javascript code
 testability and code
 
Move all the javascript code to one file. 

Full selection short cut:
ctrl+W


when we create new app in scripts folder update the following places
1. create app/app.js in scripts folder 
2. update bundle cs file
3. update layout file


Modularize javascript application
instead of global initGigs() function



pattern in c#
 rebuilding moduel pattern
 
 
 IIFE - Immediately Invoked Function Expression (IIFE)
 
 scope of function is bound to single block
 
 
In javascritpt, we can create a function inside a function;


return is public

revealing module pattern.

var Person = function() {
   var firstName = "Mosh";
   
   var sayHello = function(){
     console.log(firstName);
   }
   
   return {
      sayHello: sayHello
   }

}

// Person.sayHello(); this is reveal
Person.firstName


var GigsConroller = function() {

} (); //IIFE

------------------
client site controller


resharper shortcut: 
collapse the code
- keep the cursor end of the  start line
- hold ctrol+ press m twice



shortcut:
ctrl+w //for full method body selection 

-- object make cleaner method

a variable which pointing a reference of a function ;sometimes we call full body of method and sometimes we call partial.

every function is doing its own task and they are independent.

controller should be responsible for raised in the view and update in the view
-returning the response to that reques
- controller can perform one or more actions
- control application logic and 
- coordinate between te view and the model


Serialization is converting the state of an object into a byte stream ...

In java, to do that, we get help from java.io.serializable interface. 



when javascript files grows larger and larger we need to use http://requirejs.org
--------------

jquery on method is better

     $(container).on("click", ".js-toggle-attendance", toggleAttendance);

        //$(".js-toggle-attendance").click(toggleAttendance);
		
		

#usability determination
see eye movement in the UI controller

.gigs > li .details
.genre {
font-size: 14px;
display: block;
marging-bottom: 4px;
}
-----------------------------
angular, embar...these to modularize the javascript code

Refactoring towards the clean architecture
as uncle bob tools..

from entity framework..

actions is too long..

-- extract into separate method


#shortcut
select one variable name then, ctrl+sh+r => inline variable

select list of methods then ctrl+sh+r => refactoring method name


Repository: 
  - model: contains class
  - controller: contains logic and request and reponse of client request;
  here controller likes a manager who manages but repo is doer..
  but
  - repository: to access domain object interface like helps to store common functionalities...repo is doer
  

definition of repo: mediates between the domain and data mapping layers using a collection - like interface for accessing domain objects.

martin fowler

benefits:
 #minimize duplicate duplicate query logic
  - make reusable query logic
 #provide better soc
  
  #repo use stored procedure or linq
  # decouples from persistence framework
  # entity framework does not completely implemented repo pattern, user needs to handle..
  
  #a pattern is designed to solve an specific problem
  #repo removes duplicacies, 
  
  # repo can handle complex queries, fat controller, fat services 
  


gig and attended repo

#shortcut
add new class: ctrl+sh+A
add private field: Alt+Enter

group related objects

move common parts of methods into repository for reuse and use every where. 

#methods necessary
HttpNotFound()
HttpUnauthorizedResult()


#inline variable need when we don't need extra variable to hold the value; just use the expression directly.

#shortcut
ctrl+sh+r for inline variable

-----------------
spend 10 to 15 min

-------------
go through gigscontroller and replace all instances of using DBContext with a call to repository


#shortcut
find all references
Alt+F7

this references will ensure all the references being used or not. 

make repo methods general as posible for reuse

clean architecture:
Hexagonal architecture(port and adapter)
Onion architecture
BCE (boundary, control, entity)


same objective:
- highly separation of concern

aim
--
independent of frameworks
independent of UI
Independent of database
Testable

IN traditional(arrow direction 
------------
represent dependency direction): 
presentation layer depends on business logic

business depends on data access layer



now both ui and data access dependent on business logic...!!!!!



controller and repository are tightly coupled to entity framework which is dbcontext.

can we change EF to another ORM like hibernate????


should we go through lot of changes and their consequences...??

we do not need architecture always but sometimes we need to do it.

In team work need more work.


we need to references of dbcontext.


#repo only relates with dbcontext

Entity framework should completely decoupled from controller and model

#Repository pattern
domain object in memory

mediates between the domain and data mapping layer using a collection like interface for accessing domain object

#in repo there is no save 

where it should go: 
Unit of Work: Maintains a list of objects affected by a business transaction and coordinates the writing out of changes  

POEAA - Martin Fowler

-------------
Persisiting changes
why save should not be in repo?

if we have 2 repo; should we have save in both repo?

1. git repo

2. genre repo


#finally repo should be like collection
add(object)
Remove(object)
Get(Id): object

#UnitOfWork should be talking the database
Complete()


to change all references of multiple fixes: 

1. go one of an error and right click
2. alt+enter and select change all   variable references
3. then in the selected line, do the update text and hit enter




#Fix all error of references using resharper
- select, press alt+enter, from the list of option of resharper tool, select all change, then click on the selected change and hit enter

----------
Summary
SOC
- decouple from EF and make clean separation
- repository pattern
- understand of 
- introduce interfaces...

---------------------
Programming agains interfaces...

- truly decouple we need interface from entity framework.

Dependency inversion principle
2 parts
high level should not depend on low level module, both should independently depend on abstraction

- unit of work is dependent on controller

- coupling or dependency causes rebuild to fix '

solution:
instead of controller dependent on UnitOfWorks, controller should be dependent on IUnitOfWork

- in this way, we can even change different ORM rather than EF in the UNitofOfWork implementation; but IUnitOfWork will remain the same. 

controller will not be affected.

Iunitofworks
---------
complete, 
gigs: gigrepository


DIP
----
abstraction should not depend on details. details should depned on abstraction


IUnitofWork revised
------------------
complete
Gigs: IGigrepository



Lets apply DIP

1. make gigrepo to Igigrepo

- open the gigrep and use resharper to extract the interface and corresponding method by shortcut ctrl+sh+R, and select all public methods to insert into the interface
- Then select the interface and move to a different cs file usign shortcut Alt+enter



#Even using interface, if interface uses  new keyword to intialize object, then it depends on those objects. 

 public GigsController()
        {
            _unitOfWork = new UnitOfWork(new ApplicationDbContext());
        }
		
		change to
		
		    public GigsController(IUnitOfWork iUnitOfWork)
        {
            _unitOfWork = iUnitOfWork;
        }
		
		now _unitOfWork has no dependency as there is no new keyword in the constructor.
		
		
This is called dependency injection.
(passing intialization object in constructor instead of new object)
		
		
---------------------------------
use dependency injection framework needed now.

dip framework knows how to initialize
object

different dip frameowrks
----------
unity,ninject, autofac, structureMap

-------------
add ninject

3 packages

install-package Ninject.MVC5 -Version:5.2.3.0

install-package Ninject.Web.WebApi -Version:3.3.0


Note: version # should be project version number. If not found ,than install new version.  Like here:

Install-Package Ninject.MVC5 -Version 3.3.0


done
------
if you don't see ninjectwebcommon.cs in app_start, then update from gui package manager console and ninject version; it will update all dependent versions.

configure dip in ninjectwebcommon.cs file.

we have to register all the relevant interfaces in the kernel

e.g. kernel.Bind<IUnitoOfWork>().To<UnitToWork>

//not preferred approach though

- during registering the kernel, it is better using configuraiton rather convension
- because otherwise you can not find error without runtime analysis

for configuration: use the following:
#install-package ninject.extensions.conventions


#how to find missing files or dowload
solution: update MV5 package if any package missiong, then it will update dependent packages..



add the following in the CreateKernel() method after register service 

 kernel.Bind(x =>
                {
                    x.FromThisAssembly()
                        .SelectAllClasses()
                        .BindDefaultInterface();
                });
				
---------------------------


#Fix: if build error,
solution: try to rebuild again. 

Question: how to confirm Ninject is working?
Answer: if solution works without initializing EF but passing the value in the constructiron in interface intitializatino, then we can say Ninject is working. 


summary: after creating interface and children interface and their implementation, we need to create ninject and register automatically by convention api; then if ninject start working we can see that we do not need to initialize; ninject will automatically inject dependency.


select all classes: meaning;  select non abstract classes

----------------

handle null collection:
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-conditional-operators
?. and ?[] null-conditional operators (C# and Visual Basic)
int? length = customers?.Length; // null if customers is null
Customer first = customers?[0];  // null if customers is null
int? count = customers?[0]?.Orders?.Count();  // null if custome

---------------------

Entity Framework
we have DbSet(add, remove, where)--like repo, DbContext(savechanges)--like complete
but hidden problem there
- dbset return iqueryable where controller and service can get fat; however we can extension though, but that not the solution
- that do not have architecture that forces you to write the right code.
- differetn orm comes, that could be tightly coupled; more merge conflict issue, more work , more new issue..


Benefit of repo
- minimize duplicate query logic
- provide better separation of concerns
- decouples from persisence framework



summary:
if we hide EF behind the repository pattern, we will only change on repository pattern, EF will never change and never get impacted. this is clean architecture. 
- decouple from your application
- reducing the impact of changes.
- EF does helps, but repository actually the shild

controller-> IUnitofWork=--> UnitOfWork


couple betwen controller and persistence


However: 
controller(high level module) is dependent on persistence(low level module)

controller -> Persistence
change to

controller -> Core <- Persistence


Now:
Core(IUnitOfWork, IREpository)

Then

Persistence (UnitOfWrok, REpository)


Entitties : simple POCO 

Abstractions
 Entity, dto, viewmodel
 
 
Organization


### only migration folder dont use resharper
just drag and drop to persistence folder.

- then update configuration file and update the refence of changes 


#shortcut
to replace
ctrol+ H
------------------------------------
complexity -- meaning more dependency

if the things are orgnaized then future changes will be better isolated.

without architecture- one day will be devasted


Data annotation have problems:
- we can not make relation with them.
  fluent api helps in configuration.
  
clean way to organization...

Look: gig class all data annotation removed and applicationDBContext onModelChange relation method gets updated

however, it grows...in modelchange..so 

use Entityconfiguration...


use entityocnfiguration instead of onModelChange for foreing key references and the confiuration

Keep all the property in sorted order to find easily in the entityconfiguration

and finally update the onModelCreating  the refereces by updating the object. 

update the classes and make configurations classes and relationships

-------------------
so at the beginning we did not gave complete architecute, we did later....

keep it simple and focu on delivering value

-------------------------------------
Automated testing..




















































































